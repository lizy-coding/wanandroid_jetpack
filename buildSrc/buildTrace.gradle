import java.util.concurrent.TimeUnit

/**
 * Created by yechao on 2021/9/9.
 * Describe :
 */
class BuildTraceListener implements TaskExecutionListener, BuildListener {

    private long buildStartTime
    private long taskStartTime
    private times = []

    BuildTraceListener() {
        buildStartTime = System.currentTimeMillis()
    }

    @Override
    void buildStarted(Gradle gradle) {

    }

    @Override
    void settingsEvaluated(Settings settings) {

    }

    @Override
    void projectsLoaded(Gradle gradle) {

    }

    @Override
    void projectsEvaluated(Gradle gradle) {

    }

    @Override
    void buildFinished(BuildResult result) {
        println "Task build times : "
        for (time in times) {
            // 打印耗时大于50ms的task，可自定义
            if (times[0] >= 50) {
                printf "%7sms  %s\n", time
            }
        }
        long buildCost = System.currentTimeMillis() - buildStartTime
        println("Total build times : " + buildCost + "ms")
    }

    @Override
    void beforeExecute(Task task) {
        taskStartTime = System.currentTimeMillis()
    }

    @Override
    void afterExecute(Task task, TaskState state) {
        def ms = TimeUnit.MILLISECONDS.convert(System.currentTimeMillis() - taskStartTime, TimeUnit.NANOSECONDS)
        times.add([ms, task.path])
        task.project.logger.warn "${task.path} cost ${ms}ms"
    }
}

gradle.addListener(new BuildTraceListener())